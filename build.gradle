buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE')
// tag::build[]
        classpath('se.transmode.gradle:gradle-docker:1.2')
// end::build[]
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
// tag::plugin[]
apply plugin: 'docker'
apply plugin: 'pmd'
// end::plugin[]

// This is used as the docker image prefix (org)
group = 'accelaero'

jar {
    baseName = 'example-continuous-delivery'
    version =  '0.1.0'
}

// tag::task[]
task buildDocker(type: Docker, dependsOn: build) {
  push = true
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}
// end::task[]

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") 
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/IntegTest/java'
        }
        compileClasspath += sourceSets.test.runtimeClasspath
        // somehow this redeclaration is needed, but should be irrelevant
        // since runtimeClasspath always expands compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }    
}

task integrationTest(type: Test) {
    description = "Running Integration Tests"
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath += sourceSets.integrationTest.runtimeClasspath
}

pmd { // code quality plugin
    ruleSets = [
           // 'java-basic'
            'java-braces',
           // 'java-clone',
           // 'java-codesize',
           // 'java-comments',
          //  'java-controversial',
          //  'java-coupling',
          //  'java-design',
          //  'java-empty',
          //  'java-finalizers'
            ]
} 

